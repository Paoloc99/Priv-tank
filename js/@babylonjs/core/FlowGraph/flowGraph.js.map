{"version":3,"file":"flowGraph.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraph.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D;;;;;;GAMG;AACH,MAAM,OAAO,SAAS;IAIlB,YAA2B,MAAa;QAAb,WAAM,GAAN,MAAM,CAAO;QAHhC,YAAO,GAAqB,EAAE,CAAC;QAInC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9F,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,KAAqB;QAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACI,eAAe,CAAC,IAAY;QAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACI,KAAK;QACR,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;YAC9B,IAAI,KAAK,YAAY,mBAAmB,EAAE;gBACtC,KAAK,CAAC,eAAe,EAAE,CAAC;aAC3B;SACJ;IACL,CAAC;IAED;;OAEG;IACI,OAAO;QACV,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;YAC9B,IAAI,KAAK,YAAY,mBAAmB,EAAE;gBACtC,KAAK,CAAC,cAAc,EAAE,CAAC;aAC1B;SACJ;QACD,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACnE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACtC,CAAC;CACJ","sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport { FlowGraphEventBlock } from \"./flowGraphEventBlock\";\r\n\r\n/**\r\n * @experimental\r\n * Class used to represent a flow graph.\r\n * A flow graph is a graph of blocks that can be used to create complex logic.\r\n * Blocks can be added to the graph and connected to each other.\r\n * The graph can then be started, which will init and start all of its event blocks.\r\n */\r\nexport class FlowGraph {\r\n    private _blocks: FlowGraphBlock[] = [];\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n\r\n    public constructor(private _scene: Scene) {\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(this.dispose.bind(this));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param block\r\n     */\r\n    public _addBlock(block: FlowGraphBlock): void {\r\n        this._blocks.push(block);\r\n    }\r\n\r\n    /**\r\n     * Finds a block by its name.\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public findBlockByName(name: string): FlowGraphBlock | undefined {\r\n        return this._blocks.find((block) => block.name === name);\r\n    }\r\n\r\n    /**\r\n     * Starts the flow graph.\r\n     */\r\n    public start() {\r\n        for (const block of this._blocks) {\r\n            if (block instanceof FlowGraphEventBlock) {\r\n                block._startListening();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the flow graph.\r\n     */\r\n    public dispose() {\r\n        for (const block of this._blocks) {\r\n            if (block instanceof FlowGraphEventBlock) {\r\n                block._stopListening();\r\n            }\r\n        }\r\n        this._blocks.length = 0;\r\n        this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n        this._sceneDisposeObserver = null;\r\n    }\r\n}\r\n"]}