{"version":3,"file":"flowGraphBinaryOpBlocks.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphBinaryOpBlocks.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAGtD;;GAEG;AACH,MAAM,0BAAmD,SAAQ,cAAc;IAgB3E,YAAmB,KAAgB,EAAE,gBAAuB,EAAE,iBAAyB,EAAE,KAA8C;QACnI,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QACjE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC,CAAC;IACjG,CAAC;IAED;;OAEG;IACI,cAAc;QACjB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACvE,CAAC;CACJ;AAED;;;GAGG;AACH,MAAM,OAAO,uBAAwB,SAAQ,0BAAkD;IAC3F,YAAmB,KAAgB;QAC/B,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;IACtD,CAAC;CACJ","sourcesContent":["import type { FlowGraph } from \"../../flowGraph\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\n\r\n/**\r\n * @experimental\r\n */\r\nclass FlowGraphBinaryOpBaseBlock<LeftT, RightT, OutputT> extends FlowGraphBlock {\r\n    /**\r\n     * The left input of the binary operation.\r\n     */\r\n    public readonly left: FlowGraphDataConnection<LeftT>;\r\n    /**\r\n     * The right input of the binary operation.\r\n     */\r\n    public readonly right: FlowGraphDataConnection<RightT>;\r\n    /**\r\n     * The output of the binary operation.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<OutputT>;\r\n\r\n    private readonly _binOp: (left: LeftT, right: RightT) => OutputT;\r\n\r\n    public constructor(graph: FlowGraph, defaultLeftValue: LeftT, defaultRightValue: RightT, binOp: (left: LeftT, right: RightT) => OutputT) {\r\n        super(graph);\r\n\r\n        this._binOp = binOp;\r\n\r\n        this.left = this._registerDataInput(\"left\", defaultLeftValue);\r\n        this.right = this._registerDataInput(\"right\", defaultRightValue);\r\n        this.output = this._registerDataOutput(\"output\", binOp(defaultLeftValue, defaultRightValue));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateOutputs(): void {\r\n        this.output.value = this._binOp(this.left.value, this.right.value);\r\n    }\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Block that adds two numbers.\r\n */\r\nexport class FlowGraphAddNumberBlock extends FlowGraphBinaryOpBaseBlock<number, number, number> {\r\n    public constructor(graph: FlowGraph) {\r\n        super(graph, 0, 0, (left, right) => left + right);\r\n    }\r\n}\r\n"]}